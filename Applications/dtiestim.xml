<?xml version="1.0" encoding="utf-8"?>
<executable>
  <category>Diffusion.Diffusion Weighted Images</category>
  <title>DTIEstim (DTIProcess)</title>
  <description> \ndtiestim is a tool that takes in a set of DWIs (with --dwi_image option) in nrrd format and estimates a tensor field out of it. The output tensor file name is specified with the --tensor_output option \nThere are several methods to estimate the tensors which you can specify with the option --method lls|wls|nls|ml . Here is a short description of the different methods: \n\tlls Linear least squares. Standard estimation technique that recovers the tensor parameters by multiplying the log of the normalized signal intensities by the pseudo-inverse of the gradient matrix. Default option.\n\twls Weighted least squares. This method is similar to the linear least squares method except that the gradient matrix is weighted by the original lls estimate. (See Salvador, R., Pena, A., Menon, D. K., Carpenter, T. A., Pickard, J. D., and Bullmore, E. T. Formal characterization and extension of the linearized diffusion tensor model. Human Brain Mapping 24, 2 (Feb. 2005), 144-155. for more information on this method). This method is recommended for most applications. The weight for each iteration can be specified with the --weight_iterations.  It is not currently the default due to occasional matrix singularities.\n\tnls Non-linear least squares. This method does not take the log of the signal and requires an optimization based on levenberg-marquadt to optimize the parameters of the signal. The lls estimate is used as an initialization. For this method the step size can be specified with the --step option. \n\tml Maximum likelihood estimation. This method is experimental and is not currently recommended. For this ml method the sigma can be specified with the option --sigma and the step size can be specified with the --step option.\nYou can set a threshold (--threshold) to have the tensor estimated to only a subset of voxels. All the baseline voxel value higher than the threshold define the voxels where the tensors are computed. If not specified the threshold is calculated using an OTSU threshold on the baseline image.The masked generated by the -t option or by the otsu value can be saved with the --B0_mask_output option.\ndtiestim also can extract a few scalar images out of the DWI set of images: \n\tthe average baseline image (--B0) which is the average of all the B0s.\n\tthe IDWI (--idwi)which is the geometric mean of the diffusion images.\nYou can also load a mask if you want to compute the tensors only where the voxels are non-zero (--brain_mask) or a negative mask and the tensors will be estimated where the negative mask has zero values (--bad_region_mask)</description>
  <documentation-url>http://www.slicer.org/slicerWiki/index.php/Documentation/Nightly/Extensions/DTIProcess</documentation-url>
  <license>
  Copyright (c)  Casey Goodlett. All rights reserved.
  See http://www.ia.unc.edu/dev/Copyright.htm for details.
     This software is distributed WITHOUT ANY WARRANTY; without even
     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
     PURPOSE.  See the above copyright notices for more information.
  </license>
  <contributor>Casey Goodlett, Francois Budin</contributor>
  <acknowledgements>Hans Johnson(1,3,4); Kent Williams(1); (1=University of Iowa Department of Psychiatry, 3=University of Iowa Department of Biomedical Engineering, 4=University of Iowa Department of Electrical and Computer Engineering) provided conversions to make DTIProcess compatible with Slicer execution, and simplified the stand-alone build requirements by removing the dependancies on boost and a fortran compiler.</acknowledgements>
  <version>1.2.0</version>
  <parameters advanced="false">
    <label>Input/Ouput</label>
    <image type="diffusion-weighted">
      <name>dwiImage</name>
      <longflag>--dwi_image</longflag>
      <label>DWI Image</label>
      <description>DWI image volume (required)</description>
      <channel>input</channel>
      <default></default>
    </image>
    <image type="tensor">
      <name>tensorOutput</name>
      <longflag>--tensor_output</longflag>
      <label>Tensor Output</label>
      <description>Tensor OutputImage</description>
      <channel>output</channel>
      <default></default>
    </image>
    <image type="scalar">
      <name>B0</name>
      <longflag>--B0</longflag>
      <label>Baseline Image (optional)</label>
      <description>Baseline image, average of all baseline images</description>
      <channel>output</channel>
      <default></default>
    </image>
    <image type="scalar">
      <name>IDWI</name>
      <longflag>--idwi</longflag>
      <label>IDWI (optional)</label>
      <description>idwi output image. Image with isotropic diffusion-weighted information = geometric mean of diffusion images</description>
      <channel>output</channel>
      <default></default>
    </image>
    <image>
      <name>B0MaskOutput</name>
      <longflag>--B0_mask_output</longflag>
      <label>Mask created by thresholded B0 (optional)</label>
      <description>B0 mask used for the estimation. B0 thresholded either with the -t option value or the automatic OTSU value</description>
      <channel>output</channel>
      <default></default>
    </image>
  </parameters>
  <parameters advanced="true">
    <label>Input masks</label>
    <image>
      <name>brainMask</name>
      <longflag>--brain_mask</longflag>
      <flag>M</flag>
      <label>Brain Mask</label>
      <description>Brain mask.  Image where for every voxel == 0 the tensors are not estimated. Be aware that in addition a threshold based masking will be performed by default. If such an additional threshold masking is NOT desired, then use option -t 0.</description>
      <channel>input</channel>
      <default></default>
    </image>
    <image>
      <name>badRegionMask</name>
      <longflag>--bad_region_mask</longflag>
      <flag>B</flag>
      <label>Bad Region Mask</label>
      <description>Bad region mask.  Image where for every voxel > 0 the tensors are not estimated</description>
      <channel>input</channel>
      <default></default>
    </image>
  </parameters>
  <parameters advanced="true">
    <label>Options</label>
    <string-enumeration>
      <name>correction</name>
      <longflag>--correction</longflag>
      <description>Correct the tensors if computed tensor is not semi-definite positive.</description>
      <label>Tensors Correction</label>
      <element>none</element>
      <element>zero</element>
      <element>abs</element>
      <element>nearest</element>
      <default>none</default>
    </string-enumeration>
    <string-enumeration>
      <name>method</name>
      <label>Method</label>
      <longflag>--method</longflag>
      <flag>m</flag>
      <description>Esitmation method (lls:linear least squares, wls:weighted least squares, nls:non-linear least squares, ml:maximum likelihood)</description>
      <default>lls</default>
      <element>lls</element>
      <element>wls</element>
      <element>nls</element>
      <element>ml</element>
    </string-enumeration>
    <integer>
      <name>threshold</name>
      <longflag>--threshold</longflag>
      <flag>t</flag>
      <label>Threshold</label>
      <description>Baseline threshold for estimation. If not specified calculated using an OTSU threshold on the baseline image.</description>
      <default>-1</default>
    </integer>
    <integer>
      <name>weightIterations</name>
      <longflag>--weight_iterations</longflag>
      <label>Weight Iterations</label>
      <description>Number of iterations to recaluate weightings from tensor estimate</description>
      <default>1</default>
    </integer>
    <double>
      <name>stepSize</name>
      <longflag>--step</longflag>
      <flag>S</flag>
      <label>Step Size</label>
      <description>Gradient descent step size (for nls and ml methods)</description>
      <default>.00000001</default>
    </double>
    <double>
      <name>sigma</name>
      <longflag>--sigma</longflag>
      <flag>s</flag>
      <label>Sigma</label>
      <description></description>
      <default>-1.0</default>
    </double>
    <boolean>
      <name>doubleDTI</name>
      <longflag>--DTI_double</longflag>
      <label>DTI double (do not use in 3D Slicer)</label>
      <description>Tensor components are saved as doubles (cannot be visualized in Slicer)</description>
      <default>false</default>
    </boolean>
    <boolean>
      <name>verbose</name>
      <flag>v</flag>
      <longflag>--verbose</longflag>
      <label>Verbose</label>
      <description>produce verbose output</description>
      <default>0</default>
    </boolean>
    <double-vector>
      <name>defaultTensorValue</name>
      <longflag>--defaultTensor</longflag>
      <label>Default Tensor</label>
      <description>Default tensor used if estimated tensor is below a given threshold</description>
      <default>0,0,0,0,0,0</default>
    </double-vector>
    <boolean>
      <name>ShiftNegativeEigenvalues</name>
      <longflag>shiftNeg</longflag>
      <description><![CDATA[Shift eigenvalues so all are positive (accounts for bad tensors related to noise or acquisition error). This is the same option as the one available in DWIToDTIEstimation in Slicer (but instead of just adding the minimum eigenvalue to all the eigenvalues if it is smaller than 0, we use a coefficient to have stictly positive eigenvalues]]></description>
      <label>Shift Negative Eigenvalues</label>
      <default>false</default>
    </boolean>
    <double>
      <name>ShiftNegativeEigenvaluesCoefficient</name>
      <longflag>shiftNegCoeff</longflag>
      <description><![CDATA[Shift eigenvalues so all are positive (accounts for bad tensors related to noise or acquisition error). Instead of just adding the minimum eigenvalue to all the eigenvalues if it is smaller than 0, we use a coefficient to have stictly positive eigenvalues. Coefficient must be between 1.0 and 1.001 (included).]]></description>
      <label>Shift Negative Eigenvalues</label>
      <default>1.0001</default>
    </double>
  </parameters>
</executable>

<?xml version="1.0" encoding="utf-8"?>
<executable>
  <category>Diffusion.Diffusion Tensor Images</category>
  <title>DTIProcess (DTIProcess)</title>
  <description> \ndtiprocess is a tool that handles tensor fields. It takes as an input a tensor field in nrrd format.\nIt can generate diffusion scalar properties out of the tensor field such as : FA (--fa_output), Gradient FA image (--fa_gradient_output), color FA (--color_fa_output), MD (--md_output), Frobenius norm (--frobenius_norm_output), lbd1, lbd2, lbd3 (--lambda{1,2,3}_output), binary map of voxel where if any of the eigenvalue is negative, the voxel is set to 1 (--negative_eigenvector_output) \nIt also creates 4D images out of the tensor field such as: Highest eigenvector map (highest eigenvector at each voxel) (--principal_eigenvector_output)\n Masking capabilities: For any of the processing done with dtiprocess, it's possible to apply it on a masked region of the tensor field. You need to use the --mask option for any of the option to be applied on that tensor field sub-region only. If you want to save the masked tensor field use the option --outmask and specify the new masked tensor field file name.\ndtiprocess also allows a range of transformations on the tensor fields. The transformed tensor field file name is specified with the option --deformation_output. There are 3 resampling interpolation methods specified with the tag --interpolation followed by the type to use (nearestneighbor, linear, cubic) Then you have several transformations possible to apply:\n\t- Affine transformations using as an input \n\t- itk affine transformation file (based on the itkAffineTransform class)\n\t- Affine transformations using rview (details and download at http://www.doc.ic.ac.uk/~dr/software/). There are 2 versions of rview both creating transformation files called dof files. The old version of rview outputs text files containing the transformation parameters. It can be read in with the --dof_file option. The new version outputs binary dof files. These dof files can be transformed into human readable file with the dof2mat tool which is part of the rview package. So you need to save the output of dof2mat into a text file which can then be used with the -- newdof_file option. Usage example: dof2mat mynewdoffile.dof >> mynewdoffile.txt \t dtiprocess --dti_image mytensorfield.nhdr --newdof_file mynewdoffile.txt --rot_output myaffinetensorfield.nhdr \nNon linear transformations as an input: The default transformation file type is d-field (displacement field) in nrrd format. The option to use is --forward with the name of the file. If the transformation file is a h-field you have to add the option --hField. </description>
  <documentation-url>http://www.slicer.org/slicerWiki/index.php/Documentation/Nightly/Extensions/DTIProcess</documentation-url>
  <license>
  Copyright (c)  Casey Goodlett. All rights reserved.
  See http://www.ia.unc.edu/dev/Copyright.htm for details.
     This software is distributed WITHOUT ANY WARRANTY; without even
     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
     PURPOSE.  See the above copyright notices for more information.
  </license>
  <contributor>Casey Goodlett</contributor>
  <version>1.0.1</version>
  <parameters advanced="false">
    <label>Input DTI</label>
    <image type="tensor">
      <name>dtiImage</name>
      <longflag>--dti_image</longflag>
      <label>DTI Image</label>
      <description>DTI tensor volume</description>
      <channel>input</channel>
    </image>
  </parameters>
  <parameters advanced="false">
    <label>Diffusion Tensor Measurements</label>
    <image type="scalar">
      <name>faOutput</name>
      <longflag>--fa_output</longflag>
      <flag>f</flag>
      <label>FA Output</label>
      <description>Fractional Anisotropy output file</description>
      <channel>output</channel>
      <default></default>
    </image>
    <image type="scalar">
      <name>mdOutput</name>
      <longflag>--md_output</longflag>
      <flag>m</flag>
      <label>MD Output</label>
      <description>Mean Diffusivity output file</description>
      <channel>output</channel>
      <default></default>
    </image>
    <double>
      <name>sigma</name>
      <longflag>--sigma</longflag>
      <flag>s</flag>
      <label>Gradients scale</label>
      <description>Scale of gradients</description>
      <default>2.0</default>
    </double>
    <image type="vector">
      <name>faGradientOutput</name>
      <longflag>--fa_gradient_output</longflag>
      <label>FA Gradient Output</label>
      <description>Fractional Anisotropy Gradient output file</description>
      <channel>output</channel>
      <default></default>
    </image>
    <image type="scalar">
      <name>faGradientMagOutput</name>
      <longflag>--fa_gradmag_output</longflag>
      <label>FA Gradient Magnitude Output</label>
      <description>Fractional Anisotropy Gradient Magnitude output file</description>
      <channel>output</channel>
      <default></default>
    </image>
    <image type="vector">
      <name>colorFAOutput</name>
      <longflag>--color_fa_output</longflag>
      <label>Color FA Output</label>
      <description>Color Fractional Anisotropy output file</description>
      <channel>output</channel>
      <default></default>
    </image>
    <image type="vector">
      <name>principalEigenvectorOutput</name>
      <longflag>--principal_eigenvector_output</longflag>
      <label>Principal Eigenvectors Output</label>
      <description>Principal Eigenvectors Output</description>
      <channel>output</channel>
      <default></default>
    </image>
    <image type="scalar">
      <name>negativeEigenvectorOutput</name>
      <longflag>--negative_eigenvector_output</longflag>
      <label>Negative Eigenvectors Output</label>
      <description>Negative Eigenvectors Output: create a binary image where if any of the eigen value is below zero, the voxel is set to 1, otherwise 0.</description>
      <channel>output</channel>
      <default></default>
    </image>
    <image type="scalar">
      <name>frobeniusNormOutput</name>
      <longflag>--frobenius_norm_output</longflag>
      <label>Frobenius Norm Output</label>
      <description>Frobenius Norm Output</description>
      <channel>output</channel>
      <default></default>
    </image>
    <image type="scalar">
      <name>lambda1Output</name>
      <longflag>--lambda1_output</longflag>
      <label>Lambda 1 (AD)</label>
      <description>Axial Diffusivity - Lambda 1 (largest eigenvalue) output</description>
      <channel>output</channel>
      <default></default>
    </image>
    <image type="scalar">
      <name>lambda2Output</name>
      <longflag>--lambda2_output</longflag>
      <label>Lambda 2 </label>
      <description>Lambda 2 (middle eigenvalue) output</description>
      <channel>output</channel>
      <default></default>
    </image>
    <image type="scalar">
      <name>lambda3Output</name>
      <longflag>--lambda3_output</longflag>
      <label>Lambda 3 </label>
      <description>Lambda 3 (smallest eigenvalue) output</description>
      <channel>output</channel>
      <default></default>
    </image>
    <image type="scalar">
      <name>RDOutput</name>
      <longflag>--RD_output</longflag>
      <label>RD </label>
      <description>RD (Radial Diffusivity 1/2*(lambda2+lambda3)) output</description>
      <channel>output</channel>
      <default></default>
    </image>
  </parameters>
  <parameters advanced="true">
    <label>Affine Transformation</label>
    <image type="tensor">
      <name>rotOutput</name>
      <longflag>--rot_output</longflag>
      <flag>r</flag>
      <label>Output Transformed Tensor</label>
      <description>Rotated tensor output file.  Must also specify the dof file.</description>
      <channel>output</channel>
    </image>
    <transform>
      <name>affineitk_file</name>
      <longflag>--affineitk_file</longflag>
      <label>Affine Transform (ITK)</label>
      <description>Transformation file for affine transformation.  ITK format.</description>
      <channel>input</channel>
    </transform>
    <file>
      <name>dofFile</name>
      <longflag>--dof_file</longflag>
      <flag>d</flag>
      <label>Transform File (dof)</label>
      <description>Transformation file for affine transformation.  This can be ITK format (or the outdated RView).</description>
      <channel>input</channel>
    </file>
    <file>
      <name>newdof_file</name>
      <longflag>--newdof_file</longflag>
      <label>Transform File (new dof)</label>
      <description>Transformation file for affine transformation.  RView NEW format. (txt file output of dof2mat)</description>
      <channel>input</channel>
    </file>
  </parameters>
  <parameters advanced="true">
    <label>Masking</label>
    <image>
      <name>mask</name>
      <longflag>--mask</longflag>
      <label>Mask</label>
      <description>Mask tensors. Specify --outmask if you want to save the masked tensor field, otherwise the mask is applied just for the current processing </description>
      <channel>input</channel>
      <default></default>
    </image>
    <image type="tensor">
      <name>outmask</name>
      <longflag>--outmask</longflag>
      <label>Masked tensor</label>
      <description>Name of the masked tensor field.</description>
      <channel>output</channel>
      <default></default>
    </image>
  </parameters>
  <parameters advanced="true">
    <label>Deformation field</label>
    <boolean>
      <name>hField</name>
      <longflag>--hField</longflag>
      <label>H Fields</label>
      <description>forward and inverse transformations are h-fields instead of displacement fields</description>
      <default>0</default>
    </boolean>
    <image type="vector">
      <name>forwardTransformation</name>
      <longflag>--forward</longflag>
      <flag>F</flag>
      <label>Forward Transformation</label>
      <description>Forward transformation.  Assumed to be a deformation field in world coordinates, unless the --h-field option is specified.</description>
      <channel>input</channel>
    </image>
    <image type="tensor">
      <name>deformationOutput</name>
      <longflag>--deformation_output</longflag>
      <flag>w</flag>
      <label>Deformed tensor image</label>
      <description>Warped tensor field based on a deformation field.  This option requires the --forward,-F transformation to be specified.</description>
      <channel>output</channel>
    </image>
    <string-enumeration>
      <name>interpolation</name>
      <longflag>--interpolation</longflag>
      <flag>i</flag>
      <label>Interpolation</label>
      <description>Interpolation type (nearestneighbor, linear, cubic)</description>
      <default>linear</default>
      <element>nearestneighbor</element>
      <element>linear</element>
      <element>cubic</element>
    </string-enumeration>
    <string-enumeration>
      <name>reorientation</name>
      <longflag>--reorientation</longflag>
      <label>Reorientation</label>
      <description>Reorientation type (fs, ppd)</description>
      <default>fs</default>
      <element>fs</element>
      <element>ppd</element>
    </string-enumeration>
  </parameters>
  <parameters advanced="true">
    <label>Options</label>
    <string-enumeration>
      <name>correction</name>
      <longflag>--correction</longflag>
      <description>Correct the tensors if computed tensor is not semi-definite positive.</description>
      <label>Tensors Correction</label>
      <element>zero</element>
      <element>none</element>
      <element>abs</element>
      <element>nearest</element>
      <default>none</default>
    </string-enumeration>
    <boolean>
      <name>scalarFloat</name>
      <longflag>--scalar_float</longflag>
      <label>Scalar Float</label>
      <description>Write scalar [FA,MD] as unscaled float (with their actual values, otherwise scaled by 10 000).  Also causes FA to be unscaled [0..1].</description>
      <default>0</default>
    </boolean>
    <boolean>
      <name>doubleDTI</name>
      <longflag>--DTI_double</longflag>
      <label>DTI double (do not use in 3D Slicer)</label>
      <description>Tensor components are saved as doubles (cannot be visualized in Slicer)</description>
      <default>false</default>
    </boolean>
    <boolean>
      <name>verbose</name>
      <flag>v</flag>
      <longflag>--verbose</longflag>
      <label>Verbose</label>
      <description>produce verbose output</description>
      <default>0</default>
    </boolean>
  </parameters>
</executable>
